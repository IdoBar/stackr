% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy_stacks_haplotypes_vcf.R
\name{tidy_stacks_haplotypes_vcf}
\alias{tidy_stacks_haplotypes_vcf}
\title{Make a tidy format of the batch_x.haplotypes.vcf file}
\usage{
tidy_stacks_haplotypes_vcf(data, vcf.metadata = TRUE, strata,
  pop.levels = NULL, pop.labels = pop.levels, pop.select = NULL,
  whitelist.markers = NULL, blacklist.id = NULL, filename = NULL)
}
\arguments{
\item{data}{The stacks haplotype VCF file. e.g. \code{"batch_1.haplotypes.vcf"}}

\item{vcf.metadata}{(optional, logical) For the VCF file, 
with \code{vcf.metadata = FALSE}, 
only the genotype information is kept.
With default: \code{vcf.metadata = TRUE}, the metadata contained in the 
\code{FORMAT} field will be kept in the tidy data file.}

\item{strata}{A tab delimited file with 2 columns with header:
\code{INDIVIDUALS} and \code{STRATA}. 
The \code{STRATA} column can be any hierarchical grouping. 
To create a strata file see \code{\link[stackr]{individuals2strata}}.
If you have already run 
\href{http://catchenlab.life.illinois.edu/stacks/}{stacks} on your data, 
the strata file is similar to a stacks `population map file`, make sure you 
have the required column names  (\code{INDIVIDUALS} and \code{STRATA}).}

\item{pop.levels}{(optional, string) This refers to the levels in a factor. In this 
case, the id of the pop.
Use this argument to have the pop ordered your way instead of the default 
alphabetical or numerical order. e.g. \code{pop.levels = c("QUE", "ONT", "ALB")} 
instead of the default \code{pop.levels = c("ALB", "ONT", "QUE")}. 
Default: \code{pop.levels = NULL}.}

\item{pop.labels}{(optional, string) Use this argument to rename/relabel
your pop or combine your pop. e.g. To combine \code{"QUE"} and \code{"ONT"} 
into a new pop called \code{"NEW"}:
(1) First, define the levels for your pop with \code{pop.levels} argument: 
\code{pop.levels = c("QUE", "ONT", "ALB")}. 
(2) then, use \code{pop.labels} argument: 
\code{pop.levels = c("NEW", "NEW", "ALB")}.#' 
To rename \code{"QUE"} to \code{"TAS"}:
\code{pop.labels = c("TAS", "ONT", "ALB")}.
Default: \code{pop.labels = NULL}. If you find this too complicated, there is also the
\code{strata} argument that can do the same thing, see below.}

\item{pop.select}{(string, optional) Selected list of populations for 
the analysis. e.g. \code{pop.select = c("QUE", "ONT")} to select \code{QUE}
and \code{ONT} population samples (out of 20 pops).}

\item{whitelist.markers}{(optional) A whitelist containing CHROM (character
or integer) and/or LOCUS (integer) and/or
POS (integer) columns header. To filter by chromosome and/or locus and/or by snp.
The whitelist is in the working directory (e.g. "whitelist.txt").
de novo CHROM column with 'un' need to be changed to 1. 
In the VCF, the column ID is the LOCUS identification.
Default \code{whitelist.markers = NULL} for no whitelist of markers.}

\item{blacklist.id}{(optional) A blacklist with individual ID and
a column header 'INDIVIDUALS'. The blacklist is in the working directory
(e.g. "blacklist.txt").
Default: \code{blacklist.id = NULL}.}

\item{filename}{(optional) The file name for the tidy data frame
written to the working directory.
Default: \code{filename = NULL}, the tidy data is 
in the global environment only (i.e. not written in the working directory).}
}
\description{
Import and transform in tidy format the batch_x.haplotypes.vcf
file produced by STACKS.
}
\examples{
\dontrun{
The simplest form of the function
tidy.haplo.vcf <- tidy_stacks_haplotypes_vcf(
data = "batch_1.haplotypes.vcf",
strata = "strata.sturgeon.1pop.tsv"
)
Look carefully at the other arguments to customize your tidy haplotype vcf.
}
}
\author{
Thierry Gosselin \email{thierrygosselin@icloud.com}
}
\references{
Catchen JM, Amores A, Hohenlohe PA et al. (2011)
Stacks: Building and Genotyping Loci De Novo From Short-Read Sequences.
G3, 1, 171-182.

Catchen JM, Hohenlohe PA, Bassham S, Amores A, Cresko WA (2013)
Stacks: an analysis tool set for population genomics.
Molecular Ecology, 22, 3124-3140.

Danecek P, Auton A, Abecasis G et al. (2011)
The variant call format and VCFtools.
Bioinformatics, 27, 2156-2158.
}

