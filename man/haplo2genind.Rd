% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/haplo2genind.R
\name{haplo2genind}
\alias{haplo2genind}
\title{Convert between batch_x.haplotypes.tsv and \code{adegenet} 
\code{\link[adegenet]{genind}} object}
\usage{
haplo2genind(data, whitelist.markers = NULL, blacklist.genotype = NULL,
  erase = "genotype", common.markers = NULL, blacklist.id = NULL,
  pop.levels, pop.labels, pop.id.start, pop.id.end, pop.select = NULL,
  strata = NULL, hierarchy = NULL, imputation.method = FALSE,
  impute = "genotype", imputations.group = "populations", num.tree = 100,
  iteration.rf = 10, split.number = 100, verbose = FALSE,
  parallel.core = NULL)
}
\arguments{
\item{data}{Haplotype file created in STACKS
e.g. \code{data = "batch_1.haplotypes.tsv"},}

\item{whitelist.markers}{(optional) A whitelist containing a LOCUS (integer) 
column header. The whitelist is in the working directory (e.g. "whitelist.txt").
Default: \code{whitelist.markers = NULL} for no whitelist of markers. 
In the stacks haplotype file, the \code{LOCUS = Catalog ID}.}

\item{blacklist.genotype}{(optional) Useful to erase genotype with below 
average quality, e.g. genotype with more than 2 alleles in diploid likely 
sequencing errors or genotypes with poor genotype likelihood or coverage. 
The blacklist file header should be \code{LOCUS}. If you need to work at the
SNP level, use \code{vcf2genind}.}

\item{erase}{(character) If you don't use the \code{blacklist.genotype} 
argument you still need to decide what to do with loci or genotypes with more
than 2 alleles. Loci with more than 2 alleles (paralogs and/or sequencing 
errors) will be removed with \code{erase = "loci"}. 
Default: \code{erase= "genotype"} will erase genotypes with more than 
2 alleles by individual (paralogs and/or sequencing errors), keeping the loci
for other individuals.}

\item{common.markers}{(optional) Logical. Default = \code{FALSE}.
With \code{TRUE}, will keep markers genotyped in all the populations.}

\item{blacklist.id}{(optional) A blacklist with individual ID and
a column header 'INDIVIDUALS'. The blacklist is in the working directory
(e.g. "blacklist.txt").}

\item{pop.levels}{(required) A character string with your populations ordered.}

\item{pop.labels}{(optional) A character string for your populations labels.
If you need to rename sampling sites in \code{pop.levels} or combined sites/pop
into a different names, here is the place.}

\item{pop.id.start}{The start of your population id
in the name of your individual sample. Your individuals are identified 
in this form : SPECIES-POPULATION-MATURITY-YEAR-ID = CHI-QUE-ADU-2014-020,
then, \code{pop.id.start} = 5. If you didn't name your individuals
with the pop id in it, use the \code{strata} argument.}

\item{pop.id.end}{The end of your population id
in the name of your individual sample. Your individuals are identified 
in this form : SPECIES-POPULATION-MATURITY-YEAR-ID = CHI-QUE-ADU-2014-020,
then, \code{pop.id.end} = 7. If you didn't name your individuals
with the pop id in it, use the \code{strata} argument.}

\item{pop.select}{(string) Conduct the assignment analysis on a
selected list of populations. Default = \code{NULL} for no selection and keep
all population.
e.g. \code{pop.select = "QUE"} to select QUE population samples.
\code{pop.select = c("QUE", "ONT")} to select QUE and ONT population samples.}

\item{strata}{(optional) A tab delimited file with 2 columns with header:
\code{INDIVIDUALS} and \code{STRATA}. Default: \code{strata = NULL}. With a 
data frame of genotypes the strata is the INDIVIDUALS and POP_ID columns, with
PLINK files, the \code{tfam} first 2 columns are used. 
If a \code{strata} file is specified, the strata file will have
precedence. The \code{STRATA} column can be any hierarchical grouping.}

\item{hierarchy}{(optional) A formula that explicitely defines hierarchical levels 
in your strata. See \code{\link[adegenet]{genind}} for details.}

\item{imputation.method}{Should a map-independent imputations of markers be
computed. Available choices are: (1) \code{FALSE} for no imputation.
(2) \code{"max"} to use the most frequent category for imputations.
(3) \code{"rf"} using Random Forest algorithm. 
Default: \code{imputation.method = FALSE}.}

\item{impute}{(character) Imputation on missing genotype 
\code{impute = "genotype"} or alleles \code{impute = "allele"}.}

\item{imputations.group}{\code{"global"} or \code{"populations"}.
Should the imputations be computed globally or by populations. If you choose
global, turn the verbose to \code{TRUE}, to see progress.
Default = \code{"populations"}.}

\item{num.tree}{The number of trees to grow in Random Forest. Default is 100.}

\item{iteration.rf}{The number of iterations of missing data algorithm
in Random Forest. Default is 10.}

\item{split.number}{Non-negative integer value used to specify
random splitting in Random Forest. Default is 100.}

\item{verbose}{Logical. Should trace output be enabled on each iteration
in Random Forest ? Default is \code{FALSE}.}

\item{parallel.core}{(optional) The number of core for OpenMP shared-memory parallel
programming of Random Forest imputations. For more info on how to install the
OpenMP version see \code{\link[randomForestSRC]{randomForestSRC-package}}.
If not selected \code{detectCores()-1} is used as default.}
}
\value{
When no imputation is selected an object of the 
class \code{\link[adegenet]{genind}} is returned.
When imputation is selected a list with 2 objects is returned
and accessed with \code{$no.imputation} or \code{$imputed}.
}
\description{
This function can first filter the haplotypes file 
with a whitelist of loci
and a blacklist of individuals (optional). Then it will convert the file
to a \code{adegenet} \code{\link[adegenet]{genind}} object.
Map-independent imputation using Random Forest or the most frequent category
is also available as an option.
}
\details{
You need to have either the \code{pop.id.start} and \code{pop.id.end}
or the \code{strata} argument, to identify your populations.
The imputations using Random Forest requires more time to compute
and can take several
minutes and hours depending on the size of the dataset and polymorphism of
the species used. e.g. with a low polymorphic taxa, and a data set
containing 30\% missing data, 5 000 haplotypes loci and 500 individuals
will require 15 min.
}
\examples{
\dontrun{
snowcrab <- haplo2genind(
data = "batch_1.haplotypes.tsv",
whitelist.markers = "whitelist.txt",
common.markers = TRUE,
blacklist.id = "blacklist.id.lobster.tsv",
pop.levels = c("PAN", "COS")
pop.id.start = 5, pop.id.end = 7,
imputation.method = "rf",
impute = "genotype",
imputations.group <- "populations", 
num.tree <- 100,
iteration.rf <- 10,
split.number <- 100,
verbose <- FALSE,
parallel.core = 12
)

A list with 2 genind objects, with and without imputation: 
no.imputation <- snowcrab$no.imputation
imputed <- snowcrab$imputed
}
}
\author{
Thierry Gosselin \email{thierrygosselin@icloud.com}
}
\references{
Catchen JM, Amores A, Hohenlohe PA et al. (2011) 
Stacks: Building and Genotyping Loci De Novo From Short-Read Sequences. 
G3, 1, 171-182.

Catchen JM, Hohenlohe PA, Bassham S, Amores A, Cresko WA (2013) 
Stacks: an analysis tool set for population genomics. 
Molecular Ecology, 22, 3124-3140.

Jombart T (2008) adegenet: a R package for the multivariate
analysis of genetic markers. Bioinformatics, 24, 1403-1405.

Jombart T, Ahmed I (2011) adegenet 1.3-1: 
new tools for the analysis of genome-wide SNP data. 
Bioinformatics, 27, 3070-3071.

Ishwaran H. and Kogalur U.B. (2015). Random Forests for Survival,
 Regression and Classification (RF-SRC), R package version 1.6.1.

Ishwaran H. and Kogalur U.B. (2007). Random survival forests
for R. R News 7(2), 25-31.

Ishwaran H., Kogalur U.B., Blackstone E.H. and Lauer M.S. (2008).
Random survival forests. Ann. Appl. Statist. 2(3), 841--860.
}
\seealso{
\code{adegenet} is available on CRAN \url{http://cran.r-project.org/web/packages/adegenet/} and github \url{https://github.com/thibautjombart/}
\code{randomForestSRC} is available on CRAN \url{http://cran.r-project.org/web/packages/randomForestSRC/} and github \url{https://github.com/ehrlinger/randomForestSRC}
}

